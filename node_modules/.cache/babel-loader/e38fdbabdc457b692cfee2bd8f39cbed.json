{"ast":null,"code":"const axiosRequest = require(\"./src/axiosRequest\");\n\nconst checkParams = require(\"./src/checkParams\");\n\nconst Buffer = require(\"buffer/\").Buffer;\n\nconst fetch = require(\"node-fetch\");\n\nconst FormData = require(\"form-data\");\n\nconst {\n  OAUTH_SERVER,\n  IMMEWIDGET_URL\n} = require(\"./src/constants\");\n\nasync function immeOauth(data, onSuccess, onFailure) {\n  try {\n    checkParams(data, onSuccess, onFailure);\n    const scopeString = data.scope.join(\" \");\n\n    if (data.entity_name) {\n      widget = `${IMMEWIDGET_URL}?client_id=${data.client_id}&origin_url=${data.origin_url}&scope=${scopeString}&entity_name=${data.entity_name}&action=${data.action}`;\n    } else {\n      widget = `${IMMEWIDGET_URL}?client_id=${data.client_id}&origin_url=${data.origin_url}&scope=${scopeString}&action=${data.action}`;\n    }\n\n    window.open(widget);\n    window.addEventListener(\"message\", async function listenForMessage(event) {\n      if (event.origin !== IMMEWIDGET_URL) {\n        return;\n      } else {\n        const token = await getToken({\n          code: event.data.code,\n          client_id: data.client_id,\n          client_secret: data.client_secret\n        });\n\n        if (token.status && token.status !== 200) {\n          onFailure(token);\n        } else {\n          const userInfo = await getUserInfo(token.access_token, token.scope);\n          onSuccess(userInfo, token);\n        }\n\n        window.removeEventListener(\"message\", listenForMessage);\n      }\n    });\n  } catch (error) {\n    onFailure(error);\n  }\n}\n\nasync function immeLogout(token, client_id, client_secret) {\n  try {\n    if (typeof token !== \"string\" || !token) {\n      throw \"token is required and it must be a string\";\n    } else if (typeof client_id !== \"string\" || !client_id) {\n      throw \"client_id is required and it must be a string\";\n    } else if (typeof client_secret !== \"string\" || !client_secret) {\n      throw \"client_secret is required and it must be a string\";\n    } else {\n      return await revokeToken({\n        token,\n        client_id,\n        client_secret\n      });\n    }\n  } catch (error) {}\n}\n\nasync function getCode(data, onSuccess, onFailure) {\n  try {\n    checkParams(data, onSuccess, onFailure);\n\n    if (data.entity_name) {\n      widget = `${IMMEWIDGET_URL}?client_id=${data.client_id}&origin_url=${data.origin_url}&scope=${scopeString}&entity_name=${data.entity_name}&action=${data.action}`;\n    } else {\n      widget = `${IMMEWIDGET_URL}?client_id=${data.client_id}&origin_url=${data.origin_url}&scope=${scopeString}&action=${data.action}`;\n    }\n\n    window.open(widget);\n    window.addEventListener(\"message\", async event => {\n      if (event.origin !== IMMEWIDGET_URL) {\n        return;\n      } else {\n        onSuccess(event.data);\n      }\n    });\n  } catch (error) {\n    onFailure(error);\n  }\n} // need revoke token\n\n\nasync function revokeToken(data) {\n  try {\n    if (!data.token) {\n      throw {\n        statusText: \"Missing token\"\n      };\n    }\n\n    if (!data.client_id) {\n      throw {\n        statusText: \"Missing client_id\"\n      };\n    }\n\n    if (!data.client_secret) {\n      throw {\n        statusText: \"Missing client_secret\"\n      };\n    }\n\n    const info = `${data.client_id}:${data.client_secret}`;\n    let response;\n    let buff = new Buffer(info);\n    let base64data = buff.toString(\"base64\");\n    var myHeaders = new fetch.Headers();\n    myHeaders.append(\"Authorization\", `Basic ${base64data}`);\n    var formdata = new FormData();\n    formdata.append(\"token\", data.token);\n    var requestOptions = {\n      method: \"POST\",\n      headers: myHeaders,\n      body: formdata\n    };\n    await fetch(`${OAUTH_SERVER}/oauth/revoke`, requestOptions).then(response => {\n      if (response.status !== 200) {\n        throw response;\n      }\n\n      return response.text();\n    }).then(res => {\n      return JSON.parse(res);\n    }).then(data => {\n      response = data;\n    }).catch(error => {\n      throw error;\n    });\n    return response;\n  } catch (error) {\n    console.log(error.response);\n\n    if (error.status) {\n      return {\n        status: error.status,\n        statusText: error.statusText\n      };\n    }\n\n    return {\n      statusText: error.statusText\n    };\n  }\n}\n\nasync function getUserInfo(token) {\n  try {\n    if (!token) {\n      throw {\n        statusText: \"Token is required.\"\n      };\n    }\n\n    return await axiosRequest(\"get\", `${OAUTH_SERVER}/oauth/userinfo`, {}, {\n      Authorization: `Bearer ${token}`\n    });\n  } catch (error) {\n    if (error.response.status) {\n      return {\n        status: error.response.status,\n        statusText: error.response.statusText,\n        message: error.response.data.message\n      };\n    }\n\n    return {\n      statusText: error.statusText\n    };\n  }\n}\n\nasync function getToken(data) {\n  try {\n    if (!data.code) {\n      throw {\n        statusText: \"Missing code\"\n      };\n    }\n\n    if (!data.client_id) {\n      throw {\n        statusText: \"Missing client_id\"\n      };\n    }\n\n    if (!data.client_secret) {\n      throw {\n        statusText: \"Missing client_secret\"\n      };\n    }\n\n    const info = `${data.client_id}:${data.client_secret}`;\n    let response;\n    let buff = new Buffer(info);\n    let base64data = buff.toString(\"base64\");\n    var myHeaders = new fetch.Headers();\n    myHeaders.append(\"Authorization\", `Basic ${base64data}`);\n    var formdata = new FormData();\n    formdata.append(\"grant_type\", \"authorization_code\");\n    formdata.append(\"scope\", \"username\");\n    formdata.append(\"code\", data.code);\n    var requestOptions = {\n      method: \"POST\",\n      headers: myHeaders,\n      body: formdata\n    };\n    await fetch(`${OAUTH_SERVER}/oauth/token`, requestOptions).then(response => {\n      if (response.status !== 200) {\n        throw response;\n      }\n\n      return response.text();\n    }).then(res => {\n      return JSON.parse(res);\n    }).then(data => {\n      response = data;\n    }).catch(error => {\n      throw error;\n    });\n    return response;\n  } catch (error) {\n    if (error.status) {\n      return {\n        status: error.status,\n        statusText: error.statusText\n      };\n    }\n\n    return {\n      statusText: error.statusText\n    };\n  }\n}\n\nasync function refreshToken(data) {\n  try {\n    if (!data.token) {\n      throw {\n        statusText: \"Missing token\"\n      };\n    }\n\n    if (!data.client_id) {\n      throw {\n        statusText: \"Missing client_id\"\n      };\n    }\n\n    if (!data.client_secret) {\n      throw {\n        statusText: \"Missing client_secret\"\n      };\n    }\n\n    const info = `${data.client_id}:${data.client_secret}`;\n    let response;\n    let buff = new Buffer(info);\n    let base64data = buff.toString(\"base64\");\n    var myHeaders = new fetch.Headers();\n    myHeaders.append(\"Authorization\", `Basic ${base64data}`);\n    var formdata = new FormData();\n    formdata.append(\"grant_type\", \"refresh_token\");\n    formdata.append(\"refresh_token\", data.token);\n    var requestOptions = {\n      method: \"POST\",\n      headers: myHeaders,\n      body: formdata\n    };\n    await fetch(`${OAUTH_SERVER}/oauth/token`, requestOptions).then(response => {\n      if (response.status !== 200) {\n        throw response;\n      }\n\n      return response.text();\n    }).then(res => {\n      return JSON.parse(res);\n    }).then(data => {\n      response = data;\n    }).catch(error => {\n      throw error;\n    });\n    return response;\n  } catch (error) {\n    if (error.status) {\n      return {\n        status: error.status,\n        statusText: error.statusText\n      };\n    }\n\n    return {\n      statusText: error.statusText\n    };\n  }\n}\n\nmodule.exports = {\n  immeOauth,\n  getCode,\n  getUserInfo,\n  getToken,\n  refreshToken,\n  revokeToken,\n  immeLogout\n};","map":{"version":3,"sources":["/Users/alain/Documents/Cycurid/Demo-Website/node_modules/cycurid-widget-js/index.js"],"names":["axiosRequest","require","checkParams","Buffer","fetch","FormData","OAUTH_SERVER","IMMEWIDGET_URL","immeOauth","data","onSuccess","onFailure","scopeString","scope","join","entity_name","widget","client_id","origin_url","action","window","open","addEventListener","listenForMessage","event","origin","token","getToken","code","client_secret","status","userInfo","getUserInfo","access_token","removeEventListener","error","immeLogout","revokeToken","getCode","statusText","info","response","buff","base64data","toString","myHeaders","Headers","append","formdata","requestOptions","method","headers","body","then","text","res","JSON","parse","catch","console","log","Authorization","message","refreshToken","module","exports"],"mappings":"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","sourcesContent":["const axiosRequest = require(\"./src/axiosRequest\");\nconst checkParams = require(\"./src/checkParams\");\nconst Buffer = require(\"buffer/\").Buffer;\nconst fetch = require(\"node-fetch\");\nconst FormData = require(\"form-data\");\nconst { OAUTH_SERVER, IMMEWIDGET_URL } = require(\"./src/constants\");\n\nasync function immeOauth(data, onSuccess, onFailure) {\n  try {\n    checkParams(data, onSuccess, onFailure);\n    const scopeString = data.scope.join(\" \");\n    if (data.entity_name) {\n      widget = `${IMMEWIDGET_URL}?client_id=${data.client_id}&origin_url=${data.origin_url}&scope=${scopeString}&entity_name=${data.entity_name}&action=${data.action}`;\n    } else {\n      widget = `${IMMEWIDGET_URL}?client_id=${data.client_id}&origin_url=${data.origin_url}&scope=${scopeString}&action=${data.action}`;\n    }\n\n    window.open(widget);\n\n    window.addEventListener(\"message\", async function listenForMessage(event) {\n      if (event.origin !== IMMEWIDGET_URL) {\n        return;\n      } else {\n        const token = await getToken({\n          code: event.data.code,\n          client_id: data.client_id,\n          client_secret: data.client_secret,\n        });\n        if (token.status && token.status !== 200) {\n          onFailure(token);\n        } else {\n          const userInfo = await getUserInfo(token.access_token, token.scope);\n          onSuccess(userInfo, token);\n        }\n        window.removeEventListener(\"message\", listenForMessage);\n      }\n    });\n  } catch (error) {\n    onFailure(error);\n  }\n}\n\nasync function immeLogout(token, client_id, client_secret) {\n  try {\n    if (typeof token !== \"string\" || !token) {\n      throw \"token is required and it must be a string\";\n    } else if (typeof client_id !== \"string\" || !client_id) {\n      throw \"client_id is required and it must be a string\";\n    } else if (typeof client_secret !== \"string\" || !client_secret) {\n      throw \"client_secret is required and it must be a string\";\n    } else {\n      return await revokeToken({\n        token,\n        client_id,\n        client_secret,\n      });\n    }\n  } catch (error) {}\n}\n\nasync function getCode(data, onSuccess, onFailure) {\n  try {\n    checkParams(data, onSuccess, onFailure);\n    if (data.entity_name) {\n      widget = `${IMMEWIDGET_URL}?client_id=${data.client_id}&origin_url=${data.origin_url}&scope=${scopeString}&entity_name=${data.entity_name}&action=${data.action}`;\n    } else {\n      widget = `${IMMEWIDGET_URL}?client_id=${data.client_id}&origin_url=${data.origin_url}&scope=${scopeString}&action=${data.action}`;\n    }\n    window.open(widget);\n    window.addEventListener(\"message\", async (event) => {\n      if (event.origin !== IMMEWIDGET_URL) {\n        return;\n      } else {\n        onSuccess(event.data);\n      }\n    });\n  } catch (error) {\n    onFailure(error);\n  }\n}\n\n// need revoke token\nasync function revokeToken(data) {\n  try {\n    if (!data.token) {\n      throw { statusText: \"Missing token\" };\n    }\n    if (!data.client_id) {\n      throw { statusText: \"Missing client_id\" };\n    }\n    if (!data.client_secret) {\n      throw { statusText: \"Missing client_secret\" };\n    }\n\n    const info = `${data.client_id}:${data.client_secret}`;\n    let response;\n\n    let buff = new Buffer(info);\n    let base64data = buff.toString(\"base64\");\n    var myHeaders = new fetch.Headers();\n    myHeaders.append(\"Authorization\", `Basic ${base64data}`);\n\n    var formdata = new FormData();\n    formdata.append(\"token\", data.token);\n\n    var requestOptions = {\n      method: \"POST\",\n      headers: myHeaders,\n      body: formdata,\n    };\n    await fetch(`${OAUTH_SERVER}/oauth/revoke`, requestOptions)\n      .then((response) => {\n        if (response.status !== 200) {\n          throw response;\n        }\n        return response.text();\n      })\n      .then((res) => {\n        return JSON.parse(res);\n      })\n      .then((data) => {\n        response = data;\n      })\n      .catch((error) => {\n        throw error;\n      });\n\n    return response;\n  } catch (error) {\n    console.log(error.response);\n    if (error.status) {\n      return {\n        status: error.status,\n        statusText: error.statusText,\n      };\n    }\n    return {\n      statusText: error.statusText,\n    };\n  }\n}\n\nasync function getUserInfo(token) {\n  try {\n    if (!token) {\n      throw { statusText: \"Token is required.\" };\n    }\n    return await axiosRequest(\n      \"get\",\n      `${OAUTH_SERVER}/oauth/userinfo`,\n      {},\n      {\n        Authorization: `Bearer ${token}`,\n      }\n    );\n  } catch (error) {\n    if (error.response.status) {\n      return {\n        status: error.response.status,\n        statusText: error.response.statusText,\n        message: error.response.data.message,\n      };\n    }\n    return {\n      statusText: error.statusText,\n    };\n  }\n}\n\nasync function getToken(data) {\n  try {\n    if (!data.code) {\n      throw { statusText: \"Missing code\" };\n    }\n    if (!data.client_id) {\n      throw { statusText: \"Missing client_id\" };\n    }\n    if (!data.client_secret) {\n      throw { statusText: \"Missing client_secret\" };\n    }\n\n    const info = `${data.client_id}:${data.client_secret}`;\n    let response;\n\n    let buff = new Buffer(info);\n    let base64data = buff.toString(\"base64\");\n    var myHeaders = new fetch.Headers();\n    myHeaders.append(\"Authorization\", `Basic ${base64data}`);\n\n    var formdata = new FormData();\n    formdata.append(\"grant_type\", \"authorization_code\");\n    formdata.append(\"scope\", \"username\");\n    formdata.append(\"code\", data.code);\n\n    var requestOptions = {\n      method: \"POST\",\n      headers: myHeaders,\n      body: formdata,\n    };\n    await fetch(`${OAUTH_SERVER}/oauth/token`, requestOptions)\n      .then((response) => {\n        if (response.status !== 200) {\n          throw response;\n        }\n        return response.text();\n      })\n      .then((res) => {\n        return JSON.parse(res);\n      })\n      .then((data) => {\n        response = data;\n      })\n      .catch((error) => {\n        throw error;\n      });\n\n    return response;\n  } catch (error) {\n    if (error.status) {\n      return {\n        status: error.status,\n        statusText: error.statusText,\n      };\n    }\n    return {\n      statusText: error.statusText,\n    };\n  }\n}\n\nasync function refreshToken(data) {\n  try {\n    if (!data.token) {\n      throw { statusText: \"Missing token\" };\n    }\n    if (!data.client_id) {\n      throw { statusText: \"Missing client_id\" };\n    }\n    if (!data.client_secret) {\n      throw { statusText: \"Missing client_secret\" };\n    }\n\n    const info = `${data.client_id}:${data.client_secret}`;\n    let response;\n\n    let buff = new Buffer(info);\n    let base64data = buff.toString(\"base64\");\n    var myHeaders = new fetch.Headers();\n    myHeaders.append(\"Authorization\", `Basic ${base64data}`);\n\n    var formdata = new FormData();\n    formdata.append(\"grant_type\", \"refresh_token\");\n    formdata.append(\"refresh_token\", data.token);\n\n    var requestOptions = {\n      method: \"POST\",\n      headers: myHeaders,\n      body: formdata,\n    };\n\n    await fetch(`${OAUTH_SERVER}/oauth/token`, requestOptions)\n      .then((response) => {\n        if (response.status !== 200) {\n          throw response;\n        }\n        return response.text();\n      })\n      .then((res) => {\n        return JSON.parse(res);\n      })\n      .then((data) => {\n        response = data;\n      })\n      .catch((error) => {\n        throw error;\n      });\n\n    return response;\n  } catch (error) {\n    if (error.status) {\n      return {\n        status: error.status,\n        statusText: error.statusText,\n      };\n    }\n    return {\n      statusText: error.statusText,\n    };\n  }\n}\n\nmodule.exports = {\n  immeOauth,\n  getCode,\n  getUserInfo,\n  getToken,\n  refreshToken,\n  revokeToken,\n  immeLogout,\n};\n"]},"metadata":{},"sourceType":"script"}